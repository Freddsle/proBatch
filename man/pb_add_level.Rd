% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ProBatchFeatures copy.R, R/ProBatchFeatures.R
\name{pb_add_level}
\alias{pb_add_level}
\title{Add a new level from an external matrix and link to an existing assay}
\usage{
pb_add_level(
  object,
  from,
  new_matrix,
  to_level,
  to_pipeline = NULL,
  name = NULL,
  mapping_df = NULL,
  from_id = NULL,
  to_id = NULL,
  map_strategy = c("as_is", "first", "longest"),
  link_var = "ProteinID",
  backend = c("auto", "memory", "hdf5"),
  hdf5_path = NULL
)

pb_add_level(
  object,
  from,
  new_matrix,
  to_level,
  to_pipeline = NULL,
  name = NULL,
  mapping_df = NULL,
  from_id = NULL,
  to_id = NULL,
  map_strategy = c("as_is", "first", "longest"),
  link_var = "ProteinID",
  backend = c("auto", "memory", "hdf5"),
  hdf5_path = NULL
)
}
\arguments{
\item{object}{ProBatchFeatures}

\item{from}{assay name (e.g., "peptide::raw")}

\item{new_matrix}{numeric matrix (features x samples)}

\item{to_level}{e.g. "protein"}

\item{to_pipeline}{optional pipeline name (default carries over from 'from')}

\item{name}{optional final assay name override}

\item{mapping_df}{data.frame with mapping from 'from' IDs to 'to' IDs}

\item{from_id}{column in mapping_df for 'from' IDs (e.g., "Precursor.Id")}

\item{to_id}{column in mapping_df for 'to' IDs (e.g., "Protein.Ids")}

\item{map_strategy}{how to resolve multiple to-ids per from-id:
"as_is" (error if not 1:1), "first" (take first), "longest" (take longest string)}

\item{link_var}{rowData variable name to use for linking (e.g., "ProteinID")}

\item{backend}{"memory","hdf5","auto"}

\item{hdf5_path}{optional filepath for HDF5Array}
}
\value{
ProBatchFeatures with new assay and link added

ProBatchFeatures with new assay and link added
}
\description{
Add a new level from an external matrix and link to an existing assay

Add a new level from an external matrix and link to an existing assay
}
\examples{
# Shared setup for ProBatchFeatures documentation examples -----------------
data("example_ecoli_data", package = "proBatch")

# Extract data
all_metadata <- example_ecoli_data$all_metadata
all_precursors <- example_ecoli_data$all_precursors
all_protein_groups <- example_ecoli_data$all_protein_groups
all_precursor_pg_match <- example_ecoli_data$all_precursor_pg_match

# Keep only essential
rm(example_ecoli_data)

# Construct a ProBatchFeatures object --------------------------------------
pbf <- ProBatchFeatures(
    data_matrix = all_precursors,
    sample_annotation = all_metadata,
    sample_id_col = "FullRunName",
    level = "peptide"
)

# Register a custom step and evaluate it -----------------------------------
pb_register_step("add_one", function(x) x + 1)
pb_eval(pbf, from = "peptide::raw", steps = "add_one")

# Derived objects for downstream helpers -----------------------------------
pbf_logged <- pb_transform(
    pbf,
    from = "peptide::raw",
    steps = c("log2", "medianNorm"),
    store_fast_steps = TRUE
)

# Get information about the object ---------------------------------------
get_operation_log(pbf_logged)
get_chain(pbf_logged)
get_chain(pbf_logged, as_string = TRUE)
pb_pipeline_name(pbf_logged) # the latest pipeline
pb_pipeline_name(pbf_logged, assay = "peptide::raw")

# Access assays and matrices ------------------------------------------------
head(pb_current_assay(pbf_logged)) # the latest assay
head(pb_assay_matrix(pbf_logged)) # the latest matrix
head(pb_assay_matrix(pbf_logged, assay = "peptide::raw")) # the latest matrix
head(pb_as_wide(pbf_logged)) # the latest assay in wide format
head(pb_as_long(pbf_logged)) # the latest assay in long format

# Pipeline evaluation without storing --------------------------------------
pb_eval(
    pbf,
    from = "peptide::raw",
    steps = c("log2", "medianNorm")
)

# Long-format constructor ---------------------------------------------------
long_pbf <- pb_as_long(pbf_logged) # the latest assay in long format

ProBatchFeatures_from_long(
    df_long = long_pbf,
    sample_annotation = all_metadata,
    sample_id_col = "FullRunName",
    feature_id_col = "peptide_group_label",
    level = "peptide"
)


# Aggregate and add levels --------------------------------------------------

pb_aggregate_level(
    pbf,
    from = "peptide::raw",
    feature_var = "ProteinName",
    new_level = "protein"
)

# Add proteins as a new level and link via mapping
#    all_precursor_pg_match has columns: "Precursor.Id", "Protein.Ids"
pbf <- pb_add_level(
    object = pbf,
    from = "peptide::raw",
    new_matrix = all_protein_groups,
    to_level = "protein", # will name "protein::raw" by default
    mapping_df = all_precursor_pg_match,
    from_id = "Precursor.Id",
    to_id = "Protein.Ids",
    map_strategy = "as_is"
)
}
